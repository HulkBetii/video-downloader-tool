# utils/system_optimizer.py
"""
Utility ƒë·ªÉ t·ªëi ∆∞u h√≥a system performance cho video downloader
"""

import os
import platform
import subprocess
import psutil
import threading
from typing import Dict, List, Optional

class SystemOptimizer:
    """Class ƒë·ªÉ t·ªëi ∆∞u h√≥a system performance"""
    
    def __init__(self):
        self.system = platform.system().lower()
        self.cpu_count = os.cpu_count()
        self.memory_gb = psutil.virtual_memory().total / (1024**3)
        
    def get_optimal_settings(self) -> Dict:
        """Tr·∫£ v·ªÅ c·∫•u h√¨nh t·ªëi ∆∞u d·ª±a tr√™n system specs"""
        settings = {
            'concurrent_fragment_downloads': min(20, self.cpu_count * 2),
            'max_downloads': min(3, max(1, self.cpu_count // 2)),
            'buffersize': min(8192, max(1024, int(self.memory_gb * 512))),
            'http_chunk_size': min(52428800, max(10485760, int(self.memory_gb * 10485760))),  # 10MB - 50MB
        }
        
        # T·ªëi ∆∞u h√≥a d·ª±a tr√™n h·ªá ƒëi·ªÅu h√†nh
        if self.system == 'windows':
            settings.update({
                'socket_timeout': 15,  # Windows th∆∞·ªùng c√≥ network stack t·ªët h∆°n
                'extractor_retries': 3,
            })
        elif self.system == 'darwin':  # macOS
            settings.update({
                'socket_timeout': 25,  # macOS c√≥ network stack ·ªïn ƒë·ªãnh
                'extractor_retries': 4,
            })
        else:  # Linux
            settings.update({
                'socket_timeout': 20,  # Linux c√≥ network stack linh ho·∫°t
                'extractor_retries': 5,
            })
            
        return settings
    
    def check_external_downloaders(self) -> Dict[str, bool]:
        """Ki·ªÉm tra c√°c external downloader c√≥ s·∫µn"""
        downloaders = {}
        
        # Ki·ªÉm tra aria2c
        try:
            subprocess.run(['aria2c', '--version'], capture_output=True, check=True)
            downloaders['aria2c'] = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            downloaders['aria2c'] = False
            
        # Ki·ªÉm tra wget
        try:
            subprocess.run(['wget', '--version'], capture_output=True, check=True)
            downloaders['wget'] = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            downloaders['wget'] = False
            
        # Ki·ªÉm tra curl
        try:
            subprocess.run(['curl', '--version'], capture_output=True, check=True)
            downloaders['curl'] = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            downloaders['curl'] = False
            
        return downloaders
    
    def get_network_optimization_tips(self) -> List[str]:
        """Tr·∫£ v·ªÅ danh s√°ch tips ƒë·ªÉ t·ªëi ∆∞u h√≥a network"""
        tips = []
        
        # Tips d·ª±a tr√™n system
        if self.system == 'windows':
            tips.extend([
                "üîß T·∫Øt Windows Defender real-time protection t·∫°m th·ªùi",
                "üîß Ki·ªÉm tra Windows Firewall settings",
                "üîß S·ª≠ d·ª•ng Ethernet thay v√¨ WiFi n·∫øu c√≥ th·ªÉ",
                "üîß T·∫Øt VPN n·∫øu kh√¥ng c·∫ßn thi·∫øt"
            ])
        elif self.system == 'darwin':
            tips.extend([
                "üîß Ki·ªÉm tra macOS Firewall settings",
                "üîß T·∫Øt VPN n·∫øu kh√¥ng c·∫ßn thi·∫øt",
                "üîß S·ª≠ d·ª•ng Ethernet thay v√¨ WiFi n·∫øu c√≥ th·ªÉ"
            ])
        else:  # Linux
            tips.extend([
                "üîß Ki·ªÉm tra iptables/firewalld settings",
                "üîß T·ªëi ∆∞u h√≥a TCP parameters",
                "üîß S·ª≠ d·ª•ng Ethernet thay v√¨ WiFi n·∫øu c√≥ th·ªÉ"
            ])
            
        # Tips chung
        tips.extend([
            "üåê Ki·ªÉm tra DNS settings (th·ª≠ 8.8.8.8 ho·∫∑c 1.1.1.1)",
            "üåê T·∫Øt IPv6 n·∫øu kh√¥ng c·∫ßn thi·∫øt",
            "üåê Ki·ªÉm tra router QoS settings",
            "üåê ƒê√≥ng c√°c ·ª©ng d·ª•ng s·ª≠ d·ª•ng nhi·ªÅu bandwidth"
        ])
        
        return tips
    
    def optimize_system_for_downloads(self) -> Dict:
        """T·ªëi ∆∞u h√≥a system cho vi·ªác t·∫£i video"""
        optimizations = {}
        
        try:
            # T·ªëi ∆∞u h√≥a network buffer (ch·ªâ tr√™n Linux)
            if self.system == 'linux':
                try:
                    # TƒÉng network buffer size
                    subprocess.run(['sysctl', '-w', 'net.core.rmem_max=16777216'], check=True)
                    subprocess.run(['sysctl', '-w', 'net.core.wmem_max=16777216'], check=True)
                    optimizations['network_buffer'] = "TƒÉng network buffer size th√†nh c√¥ng"
                except subprocess.CalledProcessError:
                    optimizations['network_buffer'] = "Kh√¥ng th·ªÉ tƒÉng network buffer size (c·∫ßn sudo)"
            
            # T·ªëi ∆∞u h√≥a disk I/O
            if self.system == 'windows':
                # Windows t·ª± ƒë·ªông t·ªëi ∆∞u h√≥a
                optimizations['disk_io'] = "Windows t·ª± ƒë·ªông t·ªëi ∆∞u h√≥a disk I/O"
            else:
                # Linux/macOS
                optimizations['disk_io'] = "Disk I/O ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a t·ª± ƒë·ªông"
                
        except Exception as e:
            optimizations['error'] = f"L·ªói khi t·ªëi ∆∞u h√≥a system: {e}"
            
        return optimizations
    
    def get_performance_report(self) -> Dict:
        """Tr·∫£ v·ªÅ b√°o c√°o performance c·ªßa system"""
        try:
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            network = psutil.net_io_counters()
            
            return {
                'cpu': {
                    'count': self.cpu_count,
                    'usage_percent': cpu_percent,
                    'status': 'Good' if cpu_percent < 80 else 'High' if cpu_percent < 95 else 'Critical'
                },
                'memory': {
                    'total_gb': round(self.memory_gb, 2),
                    'available_gb': round(memory.available / (1024**3), 2),
                    'usage_percent': memory.percent,
                    'status': 'Good' if memory.percent < 80 else 'High' if memory.percent < 95 else 'Critical'
                },
                'disk': {
                    'total_gb': round(disk.total / (1024**3), 2),
                    'free_gb': round(disk.free / (1024**3), 2),
                    'usage_percent': round((disk.used / disk.total) * 100, 2),
                    'status': 'Good' if disk.free / disk.total > 0.1 else 'Low'
                },
                'network': {
                    'bytes_sent': network.bytes_sent,
                    'bytes_recv': network.bytes_recv,
                    'packets_sent': network.packets_sent,
                    'packets_recv': network.packets_recv
                }
            }
        except Exception as e:
            return {'error': f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin system: {e}"}

def main():
    """Test function"""
    optimizer = SystemOptimizer()
    
    print("üîç System Optimization Report")
    print("=" * 50)
    
    # System info
    print(f"üñ•Ô∏è  System: {platform.system()} {platform.release()}")
    print(f"üíª CPU Cores: {optimizer.cpu_count}")
    print(f"üíæ Memory: {optimizer.memory_gb:.1f} GB")
    
    # Optimal settings
    print("\n‚ö° Optimal Settings:")
    optimal = optimizer.get_optimal_settings()
    for key, value in optimal.items():
        print(f"   {key}: {value}")
    
    # External downloaders
    print("\nüîß External Downloaders:")
    downloaders = optimizer.check_external_downloaders()
    for name, available in downloaders.items():
        status = "‚úÖ Available" if available else "‚ùå Not available"
        print(f"   {name}: {status}")
    
    # Network optimization tips
    print("\nüåê Network Optimization Tips:")
    tips = optimizer.get_network_optimization_tips()
    for tip in tips:
        print(f"   {tip}")
    
    # Performance report
    print("\nüìä Performance Report:")
    report = optimizer.get_performance_report()
    if 'error' not in report:
        print(f"   CPU: {report['cpu']['usage_percent']}% ({report['cpu']['status']})")
        print(f"   Memory: {report['memory']['usage_percent']}% ({report['memory']['status']})")
        print(f"   Disk: {report['disk']['usage_percent']}% ({report['disk']['status']})")
    else:
        print(f"   Error: {report['error']}")

if __name__ == "__main__":
    main()
